/* ============================================================================
 * Build file for project 'commons-csv'
 * ============================================================================
 * This file was initial generated by EGradle
 * using 'Basic single gradle project (Java)' template
 * 
 * This is a very basic template suitable for gradle beginners and is nearly the
 * same as done by Gradle 'init' task. This generated file contains a sample 
 * Java project to get you started. In addition it will setup all necessary
 * eclipse parts also, so an out of the box import is possible.
 *
 * For more details about the java parts take a look at the Java Quickstart 
 * chapter in the Gradle user guide available at 
 * https://docs.gradle.org/current/userguide/tutorial_java_projects.html
 * ============================================================================
 */

plugins {

    id 'java'
    id 'eclipse'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

repositories {
    /* add your local maven repo - so you can deploy there */
    mavenLocal() 
    /* add maven central */
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
}

test {
    useJUnitPlatform()
}

eclipse {    
  classpath {
    // see https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
    downloadSources = true
    downloadJavadoc = true
  }
} 

/* handle non existing source folders*/
def eclipseSourceFolders=[
    'src/main/java',
    'src/main/resources',
    'src/test/java',
    'src/test/resources'
];
tasks.eclipse.dependsOn << {
        
    for (String sourceFolder: eclipseSourceFolders){ 
        def resourceDir = new File(project.projectDir, sourceFolder)
        /* try to create folder when not existing */
        if( !resourceDir.exists() && ! resourceDir.mkdirs() ) {
            logger.info("Not able to create %1",resourceDir);
        }
    }
}
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
      // turn off doclint
      options.addStringOption('Xdoclint:none', '-quiet')
      enabled = false
    }
}

// -------------------------------------
// deployment
// -------------------------------------
def distVersion="1.0.0"
def isReleaseVersion=true

def ossrhUsername = System.getenv('OSSRH_USERNAME')
def ossrhPassword = System.getenv('OSSRH_PASSWORD')

def signingActivated = hasProperty('signing.password')


group = "de.jcup.commons"
version = "${distVersion}"
 
/**
 * Task to create source jars
 */
task sourcesJar(type: Jar, dependsOn:classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

/**
 * Task to create javadoc jars
 */
task javadocJar(type: Jar, dependsOn:javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

/**
 * Define artifacts
 */
artifacts {
    archives sourcesJar
    archives javadocJar
}

if (signingActivated) {
    signing {
        sign configurations.archives
    }
}

jar {
    metaInf {
        from "LICENSE"
    }

}

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "$System.env.OSSRH_USERNAME"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "$System.env.OSSRH_PASSWORD"
                
            }
            println "Deploy to url:$url"
        }
    }
        
    publications {
        mavenJava(MavenPublication) {
             pom {
                name = 'commons-csv'
                description = 'commons-csv is a small Java library to handle CSV data. It comes without dependencies to any external libraries - except JDK.'
                groupId = 'de.jcup.commons.csv'
                
                url = 'https://github.com/de-jcup/commons-csv'
                
                from components.java
                
                licenses {
                    license {
                       name ='MIT License'
                       url ='https://opensource.org/license/mit/'
                    }
                }
                
                developers {
                  developer {
                    id ='de-jcup'
                    name ='Albert Tregnaghi'
                    email='albert.tregnaghi@jcup.de'
                  }
                }
                
                scm {
                    connection = 'scm:git:https://github.com/de-jcup/commons-csv.git'
                    developerConnection = 'scm:git:git@github.com:de-jcup/commons-csv.git'
                    url = 'https://github.com/de-jcup/commons-csv'
                }
            }
        }
    }
}

task checkCredentialsSet{
    doFirst {
        if (ossrhPassword==null){
            throw new IllegalArgumentException("OSSRH_PASSWORD not set")
        }
        
        if (ossrhUsername==null){
            throw new IllegalArgumentException("OSSRH_USERNAME not set")
        } 
        
        if (! signingActivated) {
            throw new IllegalArgumentException("signing.password property not set, but necessary!")
        }
    }

}
